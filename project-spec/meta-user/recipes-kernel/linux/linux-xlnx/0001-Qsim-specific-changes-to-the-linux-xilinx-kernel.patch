From d8fb65f72e7b7106e1db0ed7e7d20c32a41eae07 Mon Sep 17 00:00:00 2001
From: Benjamin Bimmermann <b.bimmermann@yahoo.de>
Date: Thu, 9 Nov 2017 14:22:09 +0100
Subject: [PATCH 1/1] Qsim specific changes to the linux xilinx kernel

* Enable qsim to track process pids
* Enable qsim to track CPU boot
---
 arch/arm64/include/asm/mmu_context.h |  6 +++++-
 arch/arm64/kernel/smp.c              |  9 +++++++--
 arch/x86/kernel/smpboot.c            | 10 ++++++++++
 kernel/sched/core.c                  | 19 +++++++++++++++++++
 4 files changed, 41 insertions(+), 3 deletions(-)

diff --git a/arch/arm64/include/asm/mmu_context.h b/arch/arm64/include/asm/mmu_context.h
index a501853..f142503 100644
--- a/arch/arm64/include/asm/mmu_context.h
+++ b/arch/arm64/include/asm/mmu_context.h
@@ -30,13 +30,17 @@
 #include <asm/sysreg.h>
 #include <asm/tlbflush.h>
 
+extern void do_cpuid(uint32_t val);
+
 static inline void contextidr_thread_switch(struct task_struct *next)
 {
 	if (!IS_ENABLED(CONFIG_PID_IN_CONTEXTIDR))
 		return;
 
-	write_sysreg(task_pid_nr(next), contextidr_el1);
+	write_sysreg(task_pid_nr(next), contextidr_el1);	
 	isb();
+
+        do_cpuid(0xc75c0000 | (u16)task_pid_nr(next));
 }
 
 /*
diff --git a/arch/arm64/kernel/smp.c b/arch/arm64/kernel/smp.c
index 8507703..303ba2b 100644
--- a/arch/arm64/kernel/smp.c
+++ b/arch/arm64/kernel/smp.c
@@ -129,10 +129,15 @@ static inline int op_cpu_kill(unsigned int cpu)
  */
 static int boot_secondary(unsigned int cpu, struct task_struct *idle)
 {
+	int ret = -EOPNOTSUPP;
+
 	if (cpu_ops[cpu]->cpu_boot)
-		return cpu_ops[cpu]->cpu_boot(cpu);
+		ret = cpu_ops[cpu]->cpu_boot(cpu);
+
+	if (ret != -EOPNOTSUPP)
+		asm("msr pmcr_el0, %0\n"::"r"(cpu | 0xb0070000));
 
-	return -EOPNOTSUPP;
+	return ret;
 }
 
 static DECLARE_COMPLETION(cpu_running);
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 42f5eb7..9573d1a 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -707,11 +707,19 @@ wakeup_secondary_cpu_via_nmi(int apicid, unsigned long start_eip)
 	return (send_status | accept_status);
 }
 
+/* Use magic instruction to boot other CPUs. */
+static inline void QSIM_BOOTSTRAP(u16 cpu)
+{
+	asm volatile("mov %0, %%eax;\n cpuid;\n" :: "r"(0xb0070000 | cpu) :
+		     "%eax", "%ebx", "%edx", "%ecx");
+}
+
 static int
 wakeup_secondary_cpu_via_init(int phys_apicid, unsigned long start_eip)
 {
 	unsigned long send_status = 0, accept_status = 0;
 	int maxlvt, num_starts, j;
+	static u16 cur_cpu = 1;
 
 	maxlvt = lapic_get_maxlvt();
 
@@ -749,6 +757,8 @@ wakeup_secondary_cpu_via_init(int phys_apicid, unsigned long start_eip)
 	pr_debug("Waiting for send to finish...\n");
 	send_status = safe_apic_wait_icr_idle();
 
+	QSIM_BOOTSTRAP(cur_cpu++);
+
 	mb();
 
 	/*
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 154fd68..8e0abd1 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -2855,6 +2855,16 @@ asmlinkage __visible void schedule_tail(struct task_struct *prev)
 		put_user(task_pid_vnr(current), current->set_child_tid);
 }
 
+void do_cpuid(uint32_t val)
+{
+#if defined(__aarch64__)
+	asm volatile("msr pmcr_el0, %0" :: "r" (val));
+#else
+	asm("cpuid;\n":: "a"(val) : "%ebx", "%ecx", "%edx");
+#endif
+}
+EXPORT_SYMBOL(do_cpuid);
+
 /*
  * context_switch - switch to the new MM and the new thread's register state.
  */
@@ -2864,6 +2874,15 @@ context_switch(struct rq *rq, struct task_struct *prev,
 {
 	struct mm_struct *mm, *oldmm;
 
+	/* tell qsim the pid of the next task or that it is idle
+	 */
+	if (IS_ENABLED(CONFIG_X86) || IS_ENABLED(CONFIG_ARM64)) {
+		if (next == rq->idle)
+			do_cpuid(0x1d1e1d1e);
+		else
+			do_cpuid(0xc75c0000 | (u16)task_tgid_nr(next));
+	}
+
 	prepare_task_switch(rq, prev, next);
 
 	mm = next->mm;
-- 
2.7.4

